function e(r,t){if(null==r)return r;if(Array.isArray(r))for(let i=0;i<r.length;i++)r[i]=e(r[i],t);else if("object"==typeof r)for(let i in r)r[i]=e(r[i],t);else if("string"==typeof r&&"$SEARCH"===r)r=t(r);else if("string"==typeof r&&"-1"==r){const e=+t("$SEARCH");isNaN(e)||(r=e)}return r}const r=[{name:"intercept-search",config:({filter:r},{services:t})=>{r("items.query",async(r,{collection:i},n)=>{if(!r.search)return r;const c=new t.FieldsService({schema:n?.schema,accountability:{admin:!0,roles:[]}});let s=null;try{if(s=(await c.readOne(i,"_search_config"))?.meta?.options?.search_config,!s)return r}catch(e){return r}const a=e(s,e=>e.replace("$SEARCH",r.search||"")),l={...r,search:void 0};return l.filter?l.filter={_and:[l.filter,a]}:l.filter=a,l})}}],t=[],i=[];export{t as endpoints,r as hooks,i as operations};
